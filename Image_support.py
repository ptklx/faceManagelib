#! /usr/bin/env python
#
# Support module generated by PAGE version 4.9
# In conjunction with Tcl version 8.6
#    Oct 12, 2017 07:53:10 PM


#import sys

try:
    from tkinter import *
    from tkinter import filedialog as fdialog
except ImportError:
    from Tkinter import *
    import tkFileDialog as fdialog
try:
    import tkinter.ttk as ttk
    py3 = 1
except ImportError:
    import ttk
    py3 = 0

from PIL import Image, ImageTk
import os
import cv2
import mtcnn_dlib
import drawImage


# Image Extensions Allowed
Extension = ['JPG','BMP','PNG']
def get_list(path):
    Images=[]
    #for ImageP in path:
    for i in os.listdir(path):
        Image = os.path.join(path,i)
        ext = Image.split('.')[::-1][0].upper()
        if ext in Extension:
            Images.append(Image)
    return Images


def tk_image(img,w,h):
	#img = cv2.resize(img, (w, h), interpolation=cv2.INTER_LINEAR)   #INTER_LINEAR  #INTER_AREA
	imaget = Image.fromarray(cv2.cvtColor(img,cv2.COLOR_BGR2RGB))
	imaget = imaget.resize((w, h))
	storeobj = ImageTk.PhotoImage(imaget,Image.ANTIALIAS)
	return storeobj

# Creating Canvas Widget
class PictureWindow(Canvas):
    def __init__(self,  canvas, inpath ,outpath ,savemethd,nwidth,nheight ):
        self.canvas = canvas
        self.width = nwidth
        self.height = nheight
        self.img = None
        self.copyimg = None
        self.flag = 0
        self.tface = None
        
        if inpath !='':
            self.tface = mtcnn_dlib.MtcnnDlib(inpath,outpath,savemethd,nwidth,nheight)
            self.nNum = 0
            self.methdNum = savemethd
        else:
            canvas.delete(ALL)
        sys.stdout.flush()

    def setdmethod(self,inmethod):
        if self.tface != None:
            self.tface.setMethod(inmethod)
        self.methdNum = inmethod
    def show_image(self,inimg):
        outimg=tk_image(inimg,self.width,self.height)
        self.allready=self.canvas.create_image(0, 0, image=outimg, anchor=NW , tag="bacl")	
        self.canvas.gif1=outimg
        return
	
    def next_image(self,stepN,exlight):
        Plot(1, self.canvas, ' ',3)
        if(self.tface==None):
            return
        self.tface.saveTxt()
        if self.nNum == 0:
            self.nNum , picnum= self.tface.getPersonList()
            self.nNum = picnum if picnum> 0 else self.nNum
        if self.nNum < stepN:
            self.nNum=0
            return 0	
        self.nNum -=stepN
        self.img ,self.copyimg, self.flag = self.tface.detectFeature(self.nNum,exlight)
        if self.methdNum ==4:
            if self.img is None or self.flag == 0:
                self.next_image(stepN,exlight)
            else:
                self.fix_image()
        else:
            if self.img is not None:
                self.show_image(self.img)
        return 1

    def skip_pic(self,stepN):
        if(self.tface==None):
            return
        #self.tface.saveTxt()
        if self.nNum == 0:
            self.nNum , picnum= self.tface.getPersonList()
            self.nNum = picnum if picnum> 0 else self.nNum
        if self.nNum < stepN:
            self.nNum=0
            return 0	
        self.nNum -=stepN
        self.img ,self.copyimg, self.flag = self.tface.detectFeature(self.nNum)
        if self.img is not None:
            self.show_image(self.img)
        #self.tface.notSave()
        return 1

    def closeOpentxt(self):
        if(self.tface==None):
            return
        self.tface.closeTxt()

    def fix_image(self):
        if(self.tface==None):
            return
        #self.tface.saveTxt()
        if  self.methdNum == 1:
            Plot(1, self.canvas, ' ',2)
        elif self.methdNum == 1:
            Plot(1, self.canvas, ' ',4)
        else:
            Plot(1, self.canvas, ' ',4)
        if self.copyimg is not None:
            drowf = drawImage.getMousePlace(self.copyimg,self.methdNum,1.06)
            parafive,para1 = self.tface.getDatas()
            drowf.setPara(parafive,para1)
            flag, para1,para2 = drowf.drowMouse()
            del drowf
            self.tface.setCoords(flag,para1,para2)
        else:
             Plot(1, self.canvas, ' ',3)
        self.copyimg = None
        self.tface.saveTxt()
        self.tface.notSave()

def Plot(fx, canvas, file_path,flag):
    if fx:
        if flag == 1:
            image = Image.open("modleData/starting.jpg").resize(
                (canvas.winfo_width(), canvas.winfo_height()))
        elif flag == 2:
            image = Image.open("modleData/fivetemplate.jpg").resize(
                (canvas.winfo_width(), canvas.winfo_height()))
        elif flag == 3:
            image = Image.open("modleData/waiting.jpg").resize(
                (canvas.winfo_width(), canvas.winfo_height()))
        elif flag == 4:
            image = Image.open("modleData/68.png").resize(
                (canvas.winfo_width(), canvas.winfo_height()))
        elif flag == 5:
            image = Image.open("modleData/changeOK.jpg").resize(
                (canvas.winfo_width(), canvas.winfo_height()))
        gif1 = ImageTk.PhotoImage(image, Image.ANTIALIAS)
        canvas.create_image(0, 0, image=gif1, anchor=NW)
        canvas.gif1 = gif1
    else:
        canvas.delete(ALL)
    sys.stdout.flush()
if __name__ == "__main__":
	pass
    #import ImageManage_main
    #ImageManage_main.Manage_main()
